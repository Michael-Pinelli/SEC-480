#usage: ansible-playbook -i inventories/windows.yaml --ask-pass windows_ad_groups_users.yml -K
- name: Create Users and Groups
  hosts: windows_dc

  vars_prompt:
    - name: domain_admin_pass
      prompt: "Enter your domain admin password"

  tasks:
    - name: Read CSV File
      read_csv:
        path: "{{ csv_path }}"
      register: users
      delegate_to: 127.0.0.1
      vars:
        ansible_shell_type:
    
    - name: An Ansible Loop
      debug:
        msg: "{{ item.name }} - {{ item.group }}"
      with_items: "{{ users.list }}"

    - name: Parse CSV data with Python
      ansible.builtin.python:
        interpreter_python: auto
        pip_install: ["csv"]
        vars:
          rows: []
        script: |
          import csv
          import random
          import string
          from io import StringIO

          # Parse CSV data from Ansible command output
          reader = csv.DictReader(StringIO({{ csv_data.stdout }}))
          rows = list(reader)

          # Generate random passwords for each row
          for row in rows:
            password = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
            row['password'] = password

          # Write updated CSV data to string
          output = StringIO()
          writer = csv.DictWriter(output, fieldnames=reader.fieldnames + ['password'])
          writer.writeheader()
          writer.writerows(rows)

          # Set Ansible variable to updated CSV data
          ansible_facts = {'csv_data': output.getvalue()}

      when: csv_data.stdout_lines is defined
      

    - name: Create Group
      win_domain_group:
        domain_username: "{{ ansible_user }}"
        domain_password: "{{ domain_admin_pass }}"
        name: "{{ item.group }}"
        path: "OU=Groups,OU=Accounts,OU=Blue1,DC={{ domain }},DC=local"
        state: present
        scope: global
      loop: "{{ users }}"

    - name: Create User
      win_domain_user:
        domain_username: "{{ ansible_user }}"
        domain_password: "{{ domain_admin_pass }}"
        name: "{{ item.name }}"
        groups: "{{ item.group }}, Domain Users"
        password: "{{ item.password }}"
        path: "OU=Accounts,OU=Blue1,DC={{ domain }},DC=local"
        password_never_expires: true
        state: present
      loop: "{{ users }}"
    
    # - name: Add User to correct group
    #   win_shell: |
    #     Add-ADGroupMember -Identity "{{ item.group }}" -Members "{{ item.name }}"
    #   loop: "{{ users.list }}"
    #   when: item.group is defined
    #   become_method: runas
    #   become_user: "{{ domain_admin_user }}"
    
    - name: Print User Info
      debug:
        msg: "Username: {{ item.name }} Password: {{ item.password }}"
      loop: "{{ users }}"
